
//----------------------------------------------------------------------------//
// 
//----------------------------------------------------------------------------//

- atomic
- String
- переименовать NameHash в StringHashi(StringIHash)
- Переделать в dll

- Object
	- Фабрика объектов
	- поддержка интерфейсов
		- создание экземпляра реализации интерфейса по имени интерфейса
- Система плагинов

//----------------------------------------------------------------------------//
// схема разработки систем
//----------------------------------------------------------------------------//

- выставление общих требований
- проработка основных классов
- детальные требования (минимальный функционал + возможность расширения)
- реализация
- тестирование
- рефакторинг
- чистка кода
- тестирование


* изменения в логику работы системы нижнего уровня ответственности должны вностится во время рефакторинга.
	расширение функионала происходит по мере необходимости, если это не затрагивает логику работы.
	в другом случае следует использовать временные deprecated методы и классы, и избавляться от них при рефакторинге.

//----------------------------------------------------------------------------//
// ОБЩИЙ ПЛАН РАЗРАБОТКИ
//----------------------------------------------------------------------------//

- рефакторинг ядра
	- нижний уровень (контейнеры, строки, библиотеки)
- спроектировать систему событий и объектов (как в UE4 Class, Object, Name ...)
	* по большому счету, это и есть ядро движка. все остальные системы вспомогательные/базовые
- рефакторинг ядра
	- средний и базовый уровни (потоки, ресурсы, файловая система, профилирование и т.д.)
- оконная система и система ввода
- приступить к разработке низкоуровневой системы рендеринга
- разработка компонентной системы и сцены
	- регистрация сущностей	и компонентов
	- шаг обновления
	- загрузка и сохранение сцены и состояния сцены
- разработка высокоуровневой системы рендеринга
	- рендеринг сцены
	- функционал для кастомизации рендеринга
	- материалы/проходы/эффекты
- реализация основных подсистем сцены с минимальным функционалом
	- физика
	- звук
	- анимация
	- навигация
- реализация скриптовой системы	(с достаточным функционалом для расширения движка и реализации игры)
	- определеить уровень влияния скриптов и выбрать подходящий язык из 
		Lua(Jit), Squirrel, AngelScript или более простых GameMonkey, Pawn
- приступить к разработке редактора
	- простой встраиваемый редактор в виде расширения
		- создание и простая настройка объектов
		- предпросмотр ресурсов
		- редактирование сцены
		- динамическая перезагрузка ресурсов
	- отдельный многофункциональный редактор
		- создание и редактирование ресурсов
			- шейдера и материалы
			- постэффекты
			- объекты и компоненты
			- сцены
			- анимация
			- анимационные и заскриптованные сцены
			- скрипты
			- переходы состояний
			...
		- отладка скриптов
		- импорт ресурсов
		- создание сборки
			- применение уровня детализации
			- упаковка ресурсов по настройкам целевой платформы
		- взаимодействие с отлаживаемым приложением

//----------------------------------------------------------------------------//
// current
//----------------------------------------------------------------------------//

1. Рефакторинг
	- Рефакторинг ядра
			текущий функционал:

			- кросс-компиляторные макросы
			- настройки компиляции
			- запись сообщений в лог (LogMsg)
				- Перечисление LogLevel
			- отладочные утверждения (ASSERT)
			- основные типы данных (int32, uint и т.д.)
			- базовые классы
				- class NonCopyable
					* базовый класс для большинства объектов
				- class Singleton
					* базовый класс системы
					* общие шаблонные классы
			- семантика перемещений (rvalue)
				* общие шаблонные функции
			- функции min/max
				* общие шаблонные функции
			- адрес и приведение функции (FuncPtr, FuncCast)
				* общие шаблонные функции
			- контейнеры
				* общие шаблонные классы
				- class Array
				- class List
				- class HashMap
				- class HashSet
			- шаблоны
				* общие шаблонные классы
				- class Pair
				- class InitializerList
				- class Allocator
				- class RandomAccessIterator
			- перечисление AccessMode
			- class String
				* общие классы
			- class Name - глобальный список имен
				* общие классы высокого уровня
			- class CharStream
				* сервисные классы
			- контрольнае суммы/хеш
				* общие шаблонные классы/функции
				- хеш функция для основных типов
					- хеш строк
						- class NameHash - для сравнения строк без учета регистра
							* общие классы	
						- хеш строки времени компиляции (constexpr)	
				- crc32
				- smdb
			- class Config - для сериализации/десериализации в/из текста
				* классы сериализации
			
			--------------------------------------
			? 
			--------------------------------------
			- определения общих классов и функций нужно вынести в общий файл Common.hpp
				- class Object (для Variant и Event)
				- class Config (для сериализации векторов)

			* Common.hpp
			* Container.hpp
				Array<T>
				List<T>
				HashMap<T>
				--- containers
			* String.hpp
				- String
				- WString
				- Tokenizer
				- NameHash
				--- utils
			* Debug.hpp
				- LogSystem	
				- 


			* CoreLib.hpp
				- Templates
				- Strings
					- String
					- Unicode string
					- Tokenizer
			* MathLib.hpp
			* Core systems (mid-level)
				
				* ThreadLib.hpp
					- Atomic
					- Synchronization
					- Message queues, ring buffer
					- Thread
				* Thread.hpp
					- Thread manager
					- Task manager
				* Debug.hpp
					- Logging
					- Profiling
				* Object.hpp
					- RefCounted
					- WeakReference
					- Ptr
					- Ref
					?
					- Class
					- TypeInfo
					- Attributes/Properties
					- Unique names
					- Factory
				* Event.hpp
					...
					- Messaging
					- Connection
					- EventSystem
				* File.hpp
					...
					- FileSystem
				* SerializationLib (low-level)
					- Config
					- BinaryData (generic container for raw data)
					- Variant
				* Serialization.hpp
					- SerializationContext
				* Resource.hpp
					...
					- Asset
					- Resource
					- ResourceManager
			
	- Рефакторинг FileSystem
	- Постепенная замена stl на свои контейнеры
	 
	1.1 Системы ввода/вывода
		- Переделать файловую систему
			- Разделить на физическую и виртуальную файловую систеу
			- Поддержка zip архивов
			- убрать лишний функционал
			- Поиск и перечисление файлов
		- class Config 
			- упростить
			- добавить сериализацию основных типов данных 


//----------------------------------------------------------------------------//
// todo
//----------------------------------------------------------------------------//

- протестировать RefCounted, Ptr, Ref в многопоточном режиме

